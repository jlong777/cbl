#! /bin/sh
# http://cbl.sourceforge.net

#  Copyright (C) 2003 University of Alaska Fairbanks
#  Arctic Region Supercomputing Center (ARSC)
#  http://www.arsc.edu
 
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Lesser General Public License as
#   published by the Free Software Foundation; either version 2.1 of the
#   License, or (at your option) any later version.
#  
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#  
#   You should have received a copy of the GNU Lesser General Public
#   License along with this library; if not, write to the
#   Free Software Foundation, Inc.
#   59 Temple Place, Suite 330
#   Boston, MA  02111-1307 USA

# $Id: configure,v 1.10 2005/01/13 23:07:20 jlong777 Exp $ 


# set the next 9 vars for your system, see README

TOP_DIR="/usr/local"   # top directory for lib and include
VBOX="NOT_VECTOR_BOX"  # VECTOR_BOX, NOT_VECTOR_BOX, altivec & mmx are NOT_
VLEN="128"             # SX-6=256, SV-1=64, non_vect cpu=128, >= bits in word
BMARK="0"              # 0=no benchmark during tests, 1=yes
DEBUG_INFO="0"         # set to "1" to see debug info in case of test failure

CC="cc"
CFLAGS="-O3"

AR="ar"
ARFLAGS="-rs"

# set these two for debugging and profiling

DEBUG=  #"-g"
PROF=   #"-pg"

# Some compiler/ar settings, be sure to check your documentation!
# ===============================================================

# IBM Regatta
#CC="xlc -q64 -bmaxdata:0xF00000000"  # use 64 bit if possible
#CFLAGS="-O5 -qstrict -qunroll -qhot -qignerrno"
#AR="ar"
#ARFLAGS="-rsX64"

# Cray SV1
#CFLAGS="-hscalar3 -hreduction -hvector3 -h aggress -hreport=vs"

# Portland Group
#CC="pgcc"
#CFLAGS="-fast"

# SX6
#CC="c++ -Xa"
#CFLAGS="-Cvopt"

echo "writing cbl.h..."

cat cbl.in > cbl.h
echo "void cb_repeatn(long *db, long dblen, long repeat_len, long min_repeats," >> cbl.h

# determine sizeof(long) using the defined compiler and flags

cat > long$$.c << EOF
  int main()
  {
    return (sizeof(long));
  }
EOF

$CC $CFLAGS -o long_length long$$.c

./long_length
if test $? -eq 4
then
  LONG="LONG32"
  echo "                long long *pattern, long *location, long *num_found);" >> cbl.h
fi

./long_length
if test $? -eq 8
then
  LONG="LONG64"
  echo "                long *pattern, long *location, long *num_found);" >> cbl.h
fi

echo ""                    >> cbl.h
echo "#ifdef __cplusplus"  >> cbl.h
echo "}"                   >> cbl.h
echo "#endif"              >> cbl.h
echo ""                    >> cbl.h
echo "#endif"              >> cbl.h

# determine big/little endianess

cat > endian$$.c << EOF
  int main()
  {
    unsigned long i = 0x0001;
    return ((int)((unsigned long) *((unsigned char *)&i)));
  }
EOF

$CC $CFLAGS -o what_endian endian$$.c

./what_endian
if test $? -eq 0
then
  ENDIAN="B_ENDIAN"
fi

./what_endian
if test $? -eq 1
then
  ENDIAN="L_ENDIAN"
fi

echo "writing cb_macro.h..."

echo "/* this file generated by configure script */" > cb_macro.h
echo "#define $LONG"                                >> cb_macro.h
echo "#define $ENDIAN"                              >> cb_macro.h
echo "#define VECTLEN $VLEN"                        >> cb_macro.h
echo "#define $VBOX"                                >> cb_macro.h
echo "#define BMARK $BMARK"                         >> cb_macro.h
echo "#define DEBUG_INFO $DEBUG_INFO"               >> cb_macro.h

rm endian$$.c long$$.c long_length what_endian

echo "writing makefile..."

echo "# this file generated by configure script" > makefile
echo                                            >> makefile
echo INSTALL_DIR="$TOP_DIR"                     >> makefile
echo CC="$CC"                                   >> makefile
echo CFLAGS="$CFLAGS"                           >> makefile
echo DEBUG="$DEBUG"                             >> makefile
echo AR="$AR"                                   >> makefile
echo ARFLAGS="$ARFLAGS"                         >> makefile
echo PROF="$PROF"                               >> makefile
cat makefile.in                                 >> makefile
